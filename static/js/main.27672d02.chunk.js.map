{"version":3,"sources":["components/Tooltipper.js","components/Results.js","components/About.js","components/Page.js","App.js","serviceWorker.js","index.js"],"names":["Tooltipper","OverlayTrigger","key","this","props","pos","placement","overlay","Tooltip","text","children","React","Component","int","mode","commaSep","arr","string","forEach","element","name","slice","confMessage","Results","result","json","CardGroup","Card","bg","style","width","className","src","Info","id","allow","allowTransparency","frameBorder","title","Header","ListGroup","variant","ListGroupItem","Album","album_type","label","release_date","Footer","href","URL","uri","artists","Math","floor","Features","duration_ms","expl","explicit","popularity","available_markets","length","track_number","round","acousticness","danceability","energy","instrumentalness","liveness","speechiness","valence","Table","responsive","tempo","time_signature","loudness","sects","section","index","push","start","duration","confidence","key_confidence","mode_confidence","tempo_confidence","time_signature_confidence","sections","Analysis","textAlign","About","alt","color","config","require","getSuggestions","value","a","fetch","encodeURIComponent","apiURL","then","res","renderSuggestion","suggestion","query","suggestionText","matches","AutosuggestHighlightMatch","parts","AutosuggestHighlightParse","album","images","url","map","part","highlight","getSuggestionValue","Page","jsonFetch","setState","isLoaded","about","error","onChange","event","newValue","String","onSuggestionsFetchRequested","suggestions","tracks","items","sIsLoaded","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","suggestionIndex","sectionIndex","method","aboutButton","prevState","onKeyUp","charCode","state","bind","inputProps","placeholder","onKeyPress","header","Navbar","Nav","ButtonGroup","toggle","ToggleButton","type","checked","size","message","Loader","App","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"gcAwBeA,E,uKAhBP,OACI,kBAACC,EAAA,EAAD,CACIC,IAAKC,KAAKC,MAAMC,KAAO,MACvBC,UAAWH,KAAKC,MAAMC,KAAO,MAC7BE,QACI,kBAACC,EAAA,EAAD,KAAUL,KAAKC,MAAMK,OAGzB,8BACKN,KAAKC,MAAMM,e,GAXPC,IAAMC,W,wCCIzBV,EAAM,SAACW,GACT,OAAOA,GACL,KAAK,EAAG,MAAO,IACf,KAAK,EAAG,MAAO,kBACf,KAAK,EAAG,MAAO,IACf,KAAK,EAAG,MAAO,kBACf,KAAK,EAAG,MAAO,IACf,KAAK,EAAG,MAAO,IACf,KAAK,EAAG,MAAO,kBACf,KAAK,EAAG,MAAO,IACf,KAAK,EAAG,MAAO,kBACf,KAAK,EAAG,MAAO,IACf,KAAK,GAAI,MAAO,kBAChB,KAAK,GAAI,MAAO,IAChB,QAAS,MAAO,SAIhBC,EAAO,SAACD,GACV,OAAOA,GACH,KAAK,EAAG,MAAO,QACf,KAAK,EAAG,MAAO,QACf,QAAS,MAAO,SAIlBE,EAAW,SAACC,GACd,IAAIC,EAAS,GAMb,OAJAD,EAAIE,SAAQ,SAAAC,GACRF,EAASA,GAAUE,EAAQC,MAAQD,GAAW,QAG3CF,EAAOI,MAAM,GAAI,IAYtBC,EAAc,sEAoILC,E,uKA/GP,IAAMC,EAASrB,KAAKC,MAAMqB,KAE1B,OACI,oCACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,GAAG,OACHnB,KAAK,QACLoB,MAAO,CACHC,MAAO,UAGf,yBAAKC,UAAU,0CAAyC,4BAAQA,UAAU,wBAAwBC,IAAK,wCAA0CR,EAAOS,KAAKC,GAAIC,MAAM,kBAAkBC,kBAAkB,OAAOC,YAAY,MAAMC,MAAM,mBAC1O,kBAACX,EAAA,EAAKY,OAAN,KAAa,2CAEb,kBAACC,EAAA,EAAD,CAAWT,UAAU,mBAAmBU,QAAQ,QAC5C,kBAACC,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,0BAAjB,SAA4D,6BAAM,2BAAIe,EAAOmB,MAAMvB,OACjH,kBAACsB,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAM,sEAAlB,SAAgH,6BAAM,2BAAIe,EAAOmB,MAAMC,aACrK,kBAACF,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,mCAAjB,UAAsE,6BAAM,2BAAIe,EAAOmB,MAAME,QAC3H,kBAACH,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,0CAAjB,SAA4E,6BAAM,2BAAIe,EAAOmB,MAAMG,gBAGrI,kBAACnB,EAAA,EAAKoB,OAAN,KACI,+BAAO,uBAAGC,KAAM,IAAIC,IAAIzB,EAAOmB,MAAMT,GAAI,mCAAoCH,UAAU,cAAcP,EAAOmB,MAAMO,QAKtH,kBAACvB,EAAA,EAAD,CACIC,GAAG,OACHnB,KAAK,QACLoB,MAAO,CACHC,MAAO,UAGf,kBAACH,EAAA,EAAKY,OAAN,KAAa,2CAEb,kBAACC,EAAA,EAAD,CAAWT,UAAU,mBAAmBU,QAAQ,QAC5C,kBAACC,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,0BAAjB,SAA4D,6BAAM,2BAAIe,EAAOS,KAAKb,OAChH,kBAACsB,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,wCAAjB,YAA6E,6BAAM,2BAAIM,EAASS,EAAOS,KAAKkB,WAC1I,kBAACT,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,qBAAjB,aAA2D,6BAAM,2BAAI2C,KAAKC,MAAO7B,EAAO8B,SAASC,YAAc,IAAQ,IAAM,QAAWH,KAAKC,MAAM7B,EAAO8B,SAASC,YAAc,KAAQ,GAAM,SAC7N,kBAACb,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,iDAAjB,aAAuF,6BAAM,2BAvElI,SAAC+C,GACd,OAAOA,GACP,KAAK,EACD,MAAO,MACX,QACI,MAAO,MAkEwIC,CAASjC,EAAOS,KAAKwB,YACpJ,kBAACf,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,yLAAjB,eAAiO,6BAAM,2BAAIe,EAAOS,KAAKyB,WAAhB,MACrQ,kBAAChB,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,0GAAjB,sBAAyJ,6BAAM,kBAAC,EAAD,CAAYA,KAAMM,EAASS,EAAOS,KAAK0B,mBAAoBtD,IAAI,SAAQ,2BAAG,2BAAImB,EAAOS,KAAK0B,kBAAkBC,QAArC,gBACpQ,kBAAClB,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,iHAAjB,qBAA+J,6BAA7L,IAAoM,2BAAIe,EAAOS,KAAK4B,gBAGxN,kBAAClC,EAAA,EAAKoB,OAAN,KACI,+BAAO,uBAAGC,KAAM,IAAIC,IAAIzB,EAAOS,KAAKC,GAAI,mCAAoCH,UAAU,cAAcP,EAAOS,KAAKiB,QAKpH,kBAACvB,EAAA,EAAD,CACIC,GAAG,OACHnB,KAAK,QACLoB,MAAO,CACHC,MAAO,UAGf,kBAACH,EAAA,EAAKY,OAAN,KAAa,+CAEb,kBAACC,EAAA,EAAD,CAAWT,UAAU,mBAAmBU,QAAQ,QAC5C,kBAACC,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,+DAAjB,iBAAyG,6BAAM,2BAAI2C,KAAKU,MAAqC,IAA/BtC,EAAO8B,SAASS,cAA/B,MAC7I,kBAACrB,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,mLAAjB,iBAA6N,6BAAM,2BAAI2C,KAAKU,MAAqC,IAA/BtC,EAAO8B,SAASU,cAA/B,MACjQ,kBAACtB,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,+IAAjB,WAAmL,6BAAM,2BAAI2C,KAAKU,MAA+B,IAAzBtC,EAAO8B,SAASW,QAA/B,MACvN,kBAACvB,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,kNAAjB,qBAAkO,6BAAM,2BAAI2C,KAAKU,MAAyC,IAAnCtC,EAAO8B,SAASY,kBAA/B,MACtQ,kBAACxB,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,kEAAjB,aAAwG,6BAAM,2BAAI2C,KAAKU,MAAiC,IAA3BtC,EAAO8B,SAASa,UAA/B,MAC5I,kBAACzB,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,qJAAjB,gBAA8L,6BAAM,2BAAI2C,KAAKU,MAAoC,IAA9BtC,EAAO8B,SAASc,aAA/B,MAClO,kBAAC1B,EAAA,EAAD,CAAeD,QAAQ,QAAO,kBAAC,EAAD,CAAYhC,KAAK,gPAAjB,YAAqR,6BAAM,2BAAI2C,KAAKU,MAAgC,IAA1BtC,EAAO8B,SAASe,SAA/B,SAMjU,kBAACC,EAAA,EAAD,CAAOC,YAAU,EAAC9B,QAAQ,QACtB,+BACI,4BACI,4BAAI,2BAAG,2BAAG,kBAAC,EAAD,CAAYhC,KAAK,gHAAjB,cACV,4BAAI,2BAAG,2BAAG,kBAAC,EAAD,CAAYA,KAAK,6CAAjB,UACV,4BAAI,2BAAG,2BAAG,kBAAC,EAAD,CAAYA,KAAK,oHAAjB,WACV,4BAAI,2BAAG,2BAAG,kBAAC,EAAD,CAAYA,KAAK,sIAAjB,YACV,4BAAI,2BAAG,2BAAG,kBAAC,EAAD,CAAYA,KAAK,iKAAjB,qBACV,4BAAI,2BAAG,2BAAG,kBAAC,EAAD,CAAYA,KAAK,wCAAjB,iBAIlB,+BACI,4BACI,4BAAI,uCACJ,4BAAI,2BAAIP,EAAIsB,EAAO8B,SAASpD,OAC5B,4BAAI,2BAAIY,EAAKU,EAAO8B,SAASxC,QAC7B,4BAAI,2BAAIsC,KAAKU,MAAMtC,EAAO8B,SAASkB,OAA/B,SACJ,4BAAI,2BAAIhD,EAAO8B,SAASmB,eAApB,OACJ,4BAAI,2BAAIrB,KAAKU,MAAMtC,EAAO8B,SAASoB,UAA/B,UAIZ,+BArHH,SAACC,GACd,IAAM3D,EAAM,GAaZ,OAXA2D,EAAMzD,SAAQ,SAAC0D,EAASC,GAAV,OAAoB7D,EAAI8D,KAClC,4BACI,uCAAaD,EAAb,KAAsBzB,KAAKU,MAAMV,KAAKC,MAAMuB,EAAQG,MAAQ,KAAO,QAAU3B,KAAKU,MAAOc,EAAQG,MAAQ,IAAO,OAAhH,MAA2H3B,KAAKU,MAAMV,KAAKC,OAAOuB,EAAQG,MAAQH,EAAQI,UAAY,KAAO,QAAU5B,KAAKU,OAAOc,EAAQG,MAAQH,EAAQI,UAAY,IAAM,OAA7P,KAAsQ,kBAAC,EAAD,CAAYvE,KAAMa,GAAa,2BAAOS,UAAU,cAAcqB,KAAKU,MAA2B,IAArBc,EAAQK,YAAlD,OACrS,4BAAK/E,EAAI0E,EAAQ1E,KAAjB,IAAuB,kBAAC,EAAD,CAAYO,KAAMa,GAAa,2BAAOS,UAAU,cAAcqB,KAAKU,MAA+B,IAAzBc,EAAQM,gBAAlD,OACtD,4BAAKpE,EAAK8D,EAAQ9D,MAAlB,IAAyB,kBAAC,EAAD,CAAYL,KAAMa,GAAa,2BAAOS,UAAU,cAAcqB,KAAKU,MAAgC,IAA1Bc,EAAQO,iBAAlD,OACxD,4BAAK/B,KAAKU,MAAMc,EAAQJ,OAAxB,QAAoC,kBAAC,EAAD,CAAY/D,KAAMa,GAAa,2BAAOS,UAAU,cAAcqB,KAAKU,MAAiC,IAA3Bc,EAAQQ,kBAAlD,OACnE,4BAAKR,EAAQH,eAAb,MAA+B,kBAAC,EAAD,CAAYhE,KAAMa,GAAa,2BAAOS,UAAU,cAAcqB,KAAKU,MAA0C,IAApCc,EAAQS,2BAAlD,OAC9D,4BAAKjC,KAAKU,MAAMc,EAAQF,UAAxB,YAID1D,EAwGcsE,CAAS9D,EAAO+D,SAASD,YAIlC,yBAAKzD,MAAO,CAAE2D,UAAW,WACrB,2BAAOzD,UAAU,cAAjB,qCAAgE,uBAAGiB,KAAK,sBAAsBjB,UAAU,cAAxC,WAAhE,W,GA1GEpB,IAAMC,WCfb6E,E,uKAvDP,OACI,yBAAK1D,UAAU,SACX,yBAAKC,IAA8B,YAAaF,MAAM,MAAMC,UAAU,WAAW2D,IAAI,SAErF,yBAAK7D,MAAO,CAAE2D,UAAW,WACrB,wCACA,mFAGJ,yBAAK3D,MAAO,CAAE2D,UAAW,QAAUzD,UAAU,cACzC,8BACI,2BAAG,8CACH,uEAA4C,uBAAGiB,KAAK,sBAAsBnB,MAAO,CAAE8D,MAAO,YAA9C,WAA5C,wVAEJ,6BACA,8BACI,2BAAG,mDACH,mMACA,2BAAG,8FAAH,mEACA,2BAAG,0GAAH,wHAA0M,wDAA1M,sKAEJ,6BACA,8BACI,2BAAG,sDACH,qPACA,4BACI,mHACA,wHACA,yHACA,qCAEJ,wEAA6C,mCAA7C,kCACA,4BACI,uRACA,+DAAoC,kCAApC,8HACA,mEAAwC,kCAAxC,4EACA,kKACA,gKAGR,6BACA,8BACI,2BAAG,oDACH,mEAAwC,uBAAG3C,KAAK,qBAAqBnB,MAAO,CAAE8D,MAAO,YAA7C,MAAxC,oBAAyH,uBAAG3C,KAAK,uDAAuDnB,MAAO,CAAE8D,MAAO,YAA/E,eAAzH,mGAAoU,uBAAG3C,KAAK,0CAA0CnB,MAAO,CAAE8D,MAAO,YAAlE,eAApU,2CAA0c,uBAAG3C,KAAK,uBAAuBnB,MAAO,CAAE8D,MAAO,YAA/C,WAA1c,cAA4hB,qCAA5hB,+BAAqkB,uBAAG3C,KAAK,4BAA4BnB,MAAO,CAAE8D,MAAO,YAApD,aAArkB,gGAAgvB,uBAAG3C,KAAK,uCAAuCnB,MAAO,CAAE8D,MAAO,YAA/D,eAAhvB,MAEJ,6BAAM,6BACN,8BACI,mD,GAjDJhF,IAAMC,W,gCCYpBgF,EAASC,EAAQ,IAEjBC,EAAc,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EACdC,MAAM,IAAIhD,IAAI,WAAaiD,mBAAmBH,GAAQH,EAAOO,SACnEC,MAAK,SAAAC,GAAG,OAAIA,EAAI5E,WAFI,2CAAH,sDAKd6E,EAAmB,SAACC,EAAD,GAA4B,IAAbC,EAAY,EAAZA,MAChCC,EAAc,UAAMF,EAAWpD,QAAQ,GAAG/B,KAA5B,cAAsCmF,EAAWnF,MAC/DsF,EAAUC,IAA0BF,EAAgBD,GACpDI,EAAQC,IAA0BJ,EAAgBC,GAExD,OACE,0BAAM3E,UAAU,sBACd,yBAAKC,IAAKuE,EAAWO,MAAMC,OAAO,GAAGC,IAAKlF,MAAM,MAAM4D,IAAI,cAC1D,0BAAM3D,UAAU,QAEZ6E,EAAMK,KAAI,SAACC,EAAMrC,GACb,IAAM9C,EAAYmF,EAAKC,UAAY,YAAc,KAEjD,OACA,0BAAMpF,UAAWA,EAAW7B,IAAK2E,GAAQqC,EAAKzG,YAStD2G,EAAqB,SAAAb,GAAU,OAAIA,EAAWnF,MAuJrCiG,E,kDApJb,WAAYjH,GAAQ,IAAD,8BACf,cAAMA,IAeVkH,UAAY,SAACpF,GACX,EAAKqF,SAAS,CACZC,UAAU,EACVC,OAAO,EACP1B,MAAO,KAGTE,MAAM,IAAIhD,IAAI,aAAeiD,mBAAmBhE,GAAK0D,EAAOO,SACzDC,MAAK,SAAAC,GAAG,OAAIA,EAAI5E,UAChB2E,MACC,SAAC5E,GACyB,KAArBA,EAAOS,KAAKb,MACb,EAAKmG,SAAS,CACZC,UAAU,EACVE,MAAO,KACPlG,cAIN,SAACkG,GACC,EAAKH,SAAS,CACZC,UAAU,EACVE,cAtCS,EA4CnBC,SAAW,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,SACjB,EAAKN,SAAS,CACZxB,MAAO+B,OAAOD,MA9CD,EAkDnBE,4BAA8B,YAAgB,IAAbhC,EAAY,EAAZA,MAC/BD,EAAeC,GACdK,MAAK,SAAA5E,GAAM,OAAI,EAAK+F,SAAS,CAC5BS,YAAaxG,EAAOyG,OAAOC,MAC3BC,WAAW,QAtDI,EA0DnBC,4BAA8B,WAC5B,EAAKb,SAAS,CACZS,YAAa,GACbG,WAAW,KA7DI,EAiEnBE,qBAAuB,SAACT,EAAD,GAAoF,IAA1ErB,EAAyE,EAAzEA,WAAyE,EAA7D+B,gBAA6D,EAA5CC,gBAA4C,EAA3BC,aAA2B,EAAbC,OAC3F,EAAKnB,UAAUf,EAAWrE,KAlET,EAqEnBwG,YAAc,WACZ,EAAKnB,UAAS,SAAAoB,GAAS,MAAK,CAC1BlB,OAAQkB,EAAUlB,WAvEH,EA2EnBmB,QAAU,SAAChB,GACa,KAAnBA,EAAMiB,UAAwC,KAArB,EAAKC,MAAM/C,OACrC,EAAKuB,UAAU,EAAKwB,MAAM/C,QA3E1B,EAAK+C,MAAQ,CACTZ,MAAO,GACP1G,OAAQ,GACRuE,MAAO,GACPiC,YAAa,GAEbN,MAAO,KACPF,UAAU,EACVC,OAAO,GAGX,EAAKmB,QAAU,EAAKA,QAAQG,KAAb,gBAbA,E,qDAiFT,IAAD,EAGH5I,KAAK2I,MADPpB,EAFK,EAELA,MAAOF,EAFF,EAEEA,SAAUhG,EAFZ,EAEYA,OAAQuE,EAFpB,EAEoBA,MAAOiC,EAF3B,EAE2BA,YAAaP,EAFxC,EAEwCA,MAGzCuB,EAAa,CACjBC,YAAa,oBACblD,QACA4B,SAAUxH,KAAKwH,SACfuB,WAAY/I,KAAKyI,SAGfO,EACF,4BAAQpH,UAAU,cAChB,kBAACqH,EAAA,EAAD,CAAQxH,GAAG,SAASa,QAAQ,QAC1B,kBAAC,IAAD,CACEuF,YAAaA,EACbD,4BAA6B5H,KAAK4H,4BAClCK,4BAA6BjI,KAAKiI,4BAClChB,mBAAoBA,EACpBd,iBAAkBA,EAClB0C,WAAYA,EACZX,qBAAsBlI,KAAKkI,uBAE7B,kBAACgB,EAAA,EAAD,CAAKtH,UAAU,YAEf,kBAAC,EAAD,CAAYtB,KAAK,eAAeJ,IAAI,UAClC,kBAACiJ,EAAA,EAAD,CAAaC,QAAM,EAACxH,UAAU,QAC5B,kBAACyH,EAAA,EAAD,CACIC,KAAK,WACLhH,QAAQ,YACRiH,QAASjC,EACT1B,MAAM,IACN4B,SAAUxH,KAAKuI,YACfiB,KAAK,MANT,SAgBV,OACE,yBAAK5H,UAAU,OACZoH,EACD,0BAAMpH,UAAU,YAEZ2F,EACA,0BAAM3F,UAAU,cAAhB,UAAqC2F,EAAMkC,SAEzCnC,EACA,kBAAC,EAAD,MAEED,EACA,kBAAC,EAAD,CAAS/F,KAAMD,IACb,oC,GA3ICb,IAAMC,WC1CnBiJ,G,MAAS,kBACb,yBAAK9H,UAAU,OACb,8CAYW+H,EARH,WACV,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxE,MAAK,SAAAyE,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLsD,QAAQtD,MAAMA,EAAMkC,c","file":"static/js/main.27672d02.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    OverlayTrigger,\r\n    Tooltip\r\n} from \"react-bootstrap\";\r\n\r\nclass Tooltipper extends React.Component {\r\n    render() {\r\n        return (\r\n            <OverlayTrigger\r\n                key={this.props.pos || \"top\"}\r\n                placement={this.props.pos || \"top\"}\r\n                overlay={\r\n                    <Tooltip>{this.props.text}</Tooltip>\r\n                }\r\n            >\r\n                <span>\r\n                    {this.props.children}\r\n                </span>\r\n            </OverlayTrigger>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tooltipper","import React from \"react\"\r\nimport Tooltipper from \"./Tooltipper\"\r\nimport {\r\n    Card,\r\n    CardGroup,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Table\r\n} from \"react-bootstrap\"\r\n\r\nconst key = (int) => {\r\n    switch(int) {\r\n      case 0: return \"C\";\r\n      case 1: return \"C♯/D♭\";\r\n      case 2: return \"D\";\r\n      case 3: return \"D♯/E♭\";\r\n      case 4: return \"E\";\r\n      case 5: return \"F\";\r\n      case 6: return \"F♯/G♭\";\r\n      case 7: return \"G\";\r\n      case 8: return \"G♯/A♭\";\r\n      case 9: return \"A\";\r\n      case 10: return \"A♯/B♭\";\r\n      case 11: return \"B\";\r\n      default: return \"None\";\r\n    }\r\n  }\r\n  \r\nconst mode = (int) => {\r\n    switch(int) {\r\n        case 0: return \"Minor\";\r\n        case 1: return \"Major\";\r\n        default: return \"None\";\r\n    }\r\n}\r\n\r\nconst commaSep = (arr) => {\r\n    var string = \"\"\r\n\r\n    arr.forEach(element => {\r\n        string = string + (element.name || element) + \", \";\r\n    });\r\n\r\n    return string.slice(0, -2);\r\n}\r\n\r\nconst explicit = (expl) => {\r\n    switch(expl) {\r\n    case true:\r\n        return \"Yes\";\r\n    default:\r\n        return \"No\";\r\n    }\r\n}\r\n\r\nconst confMessage = \"This number represents how confident Spotify is in the calculation.\"\r\n\r\nconst sections = (sects) => {\r\n    const arr = [];\r\n\r\n    sects.forEach((section, index) => arr.push(\r\n        <tr>\r\n            <td>Section {index} ({Math.round(Math.floor(section.start / 60)) + \" min \" + Math.round((section.start % 60)) + \" sec\"} - {Math.round(Math.floor((section.start + section.duration) / 60)) + \" min \" + Math.round((section.start + section.duration) % 60) + \" sec\"}) <Tooltipper text={confMessage}><small className=\"text-muted\">{Math.round(section.confidence * 100)}%</small></Tooltipper></td>\r\n            <td>{key(section.key)} <Tooltipper text={confMessage}><small className=\"text-muted\">{Math.round(section.key_confidence * 100)}%</small></Tooltipper></td>\r\n            <td>{mode(section.mode)} <Tooltipper text={confMessage}><small className=\"text-muted\">{Math.round(section.mode_confidence * 100)}%</small></Tooltipper></td>\r\n            <td>{Math.round(section.tempo)} bpm <Tooltipper text={confMessage}><small className=\"text-muted\">{Math.round(section.tempo_confidence * 100)}%</small></Tooltipper></td>\r\n            <td>{section.time_signature}/4 <Tooltipper text={confMessage}><small className=\"text-muted\">{Math.round(section.time_signature_confidence * 100)}%</small></Tooltipper></td>\r\n            <td>{Math.round(section.loudness)} dB</td>\r\n        </tr>\r\n    ))\r\n\r\n    return arr\r\n}\r\n\r\nclass Results extends React.Component {\r\n    render() {\r\n        const result = this.props.json\r\n\r\n        return (\r\n            <>\r\n                <CardGroup>\r\n                    <Card\r\n                        bg=\"dark\"\r\n                        text=\"white\"\r\n                        style={{\r\n                            width: '18rem'\r\n                        }}\r\n                    >\r\n                    <div className=\"embed-responsive embed-responsive-4by3\"><iframe className=\"embed-responsive-item\" src={\"https://open.spotify.com/embed/track/\" + result.Info.id} allow=\"encrypted-media\" allowTransparency=\"true\" frameBorder=\"-10\" title=\"Track Preview\" /></div>\r\n                    <Card.Header><b>Album Info:</b></Card.Header>\r\n\r\n                    <ListGroup className=\"list-group-flush\" variant=\"dark\">\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"The name of the album.\">Name:</Tooltipper><br /><b>{result.Album.name}</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text={\"The type of the album: one of \\\"album\\\", \\\"single\\\", or \\\"compilation\\\".\"}>Type:</Tooltipper><br /><b>{result.Album.album_type}</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"The record label for the album.\">Label:</Tooltipper><br /><b>{result.Album.label}</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"The date the album was first released.\">Date:</Tooltipper><br /><b>{result.Album.release_date}</b></ListGroupItem>\r\n                    </ListGroup>\r\n\r\n                    <Card.Footer>\r\n                        <small><a href={new URL(result.Album.id, \"https://open.spotify.com/album/\")} className=\"text-muted\">{result.Album.uri}</a></small>\r\n                    </Card.Footer>\r\n                    </Card>\r\n\r\n\r\n                    <Card\r\n                        bg=\"dark\"\r\n                        text=\"white\"\r\n                        style={{\r\n                            width: '18rem'\r\n                        }}\r\n                    >\r\n                    <Card.Header><b>Track Info:</b></Card.Header>\r\n\r\n                    <ListGroup className=\"list-group-flush\" variant=\"dark\">\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"The name of the track.\">Name:</Tooltipper><br /><b>{result.Info.name}</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"The artists who performed the track.\">Artists:</Tooltipper><br /><b>{commaSep(result.Info.artists)}</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"The track length.\">Duration:</Tooltipper><br /><b>{Math.floor((result.Features.duration_ms / 1000) / 60) + \" min \" + (Math.floor(result.Features.duration_ms / 1000) % 60) + \" sec\"}</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"Whether or not the track has explicit lyrics.\">Explicit:</Tooltipper><br /><b>{explicit(result.Info.explicit)}</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"The popularity of the track. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.\">Popularity:</Tooltipper><br /><b>{result.Info.popularity}%</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code.\">Available Markets:</Tooltipper><br /><Tooltipper text={commaSep(result.Info.available_markets)} pos=\"right\"><b><u>{result.Info.available_markets.length}</u> countries</b></Tooltipper></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"The number of the track. If an album has several discs, the track number is the number on the specified disc.\">Track # on album:</Tooltipper><br />#<b>{result.Info.track_number}</b></ListGroupItem>\r\n                    </ListGroup>\r\n\r\n                    <Card.Footer>\r\n                        <small><a href={new URL(result.Info.id, \"https://open.spotify.com/track/\")} className=\"text-muted\">{result.Info.uri}</a></small>\r\n                    </Card.Footer>\r\n                    </Card>\r\n\r\n\r\n                    <Card\r\n                        bg=\"dark\"\r\n                        text=\"white\"\r\n                        style={{\r\n                            width: '18rem'\r\n                        }}\r\n                    >\r\n                    <Card.Header><b>Track Features:</b></Card.Header>\r\n\r\n                    <ListGroup className=\"list-group-flush\" variant=\"dark\">\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"Acousticness is a measure of whether the track is acoustic.\">Acousticness:</Tooltipper><br /><b>{Math.round(result.Features.acousticness * 100)}%</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.\">Danceability:</Tooltipper><br /><b>{Math.round(result.Features.danceability * 100)}%</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"Energy is a measure that represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy.\">Energy:</Tooltipper><br /><b>{Math.round(result.Features.energy * 100)}%</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"Instrumentalness predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”.\">Instrumentalness:</Tooltipper><br /><b>{Math.round(result.Features.instrumentalness * 100)}%</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"Liveness detects the presence of an audience in the recording.\">Liveness:</Tooltipper><br /><b>{Math.round(result.Features.liveness * 100)}%</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry).\">Speechiness:</Tooltipper><br /><b>{Math.round(result.Features.speechiness * 100)}%</b></ListGroupItem>\r\n                        <ListGroupItem variant=\"dark\"><Tooltipper text=\"Valence is a measure describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\">Valence:</Tooltipper><br /><b>{Math.round(result.Features.valence * 100)}%</b></ListGroupItem>\r\n                    </ListGroup>\r\n\r\n                    </Card>\r\n                </CardGroup>\r\n                \r\n                <Table responsive variant=\"dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><u><b><Tooltipper text=\"Sections are defined by large variations in rhythm or timbre (e.g. chorus, verse, bridge, guitar solo, etc).\">Section</Tooltipper></b></u></th>\r\n                            <th><u><b><Tooltipper text=\"The estimated overall key of the section.\">Key</Tooltipper></b></u></th>\r\n                            <th><u><b><Tooltipper text=\"Indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived.\">Mode</Tooltipper></b></u></th>\r\n                            <th><u><b><Tooltipper text=\"The overall estimated tempo (speed or pace of a given piece) of the section. This derives directly from the average beat duration.\">Tempo</Tooltipper></b></u></th>\r\n                            <th><u><b><Tooltipper text=\"An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).\">Time Signature</Tooltipper></b></u></th>\r\n                            <th><u><b><Tooltipper text=\"The overall loudness of the section.\">Loudness</Tooltipper></b></u></th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <thead>\r\n                        <tr>\r\n                            <td><b>Overall</b></td>\r\n                            <td><b>{key(result.Features.key)}</b></td>\r\n                            <td><b>{mode(result.Features.mode)}</b></td>\r\n                            <td><b>{Math.round(result.Features.tempo)} bpm</b></td>\r\n                            <td><b>{result.Features.time_signature}/4</b></td>\r\n                            <td><b>{Math.round(result.Features.loudness)} dB</b></td>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {sections(result.Analysis.sections)}\r\n                    </tbody>\r\n                </Table>\r\n\r\n                <div style={{ textAlign: \"center\" }}>\r\n                    <small className=\"text-muted\">All metadata is made available by <a href=\"https://spotify.com\" className=\"text-muted\">Spotify</a>.</small>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Results","import React from \"react\"\r\n\r\nclass About extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n                <img src={process.env.PUBLIC_URL + \"/logo.png\"} width=\"200\" className=\"App-logo\" alt=\"Logo\" />\r\n\r\n                <div style={{ textAlign: \"center\" }}>\r\n                    <h1>MetaGrab</h1>\r\n                    <h2>Grabs Spotify's metadata for any track you'd like!</h2>\r\n                </div>\r\n\r\n                <div style={{ textAlign: \"left\" }} className=\"about-text\">\r\n                    <span>\r\n                        <u><h3>What is this?</h3></u>\r\n                        <p>This is a small little webapp that grabs <a href=\"https://spotify.com\" style={{ color: \"#85BBFD\" }}>Spotify</a>'s metadata about any track on its platform. Metadata is data about other data. Track metadata can include artists, what album the track appeared on, and the qualitative feel of the track. If you are ever curious about what Spotify thinks of a particular track and about what it uses to feed its recommendation algorithms, this is for you!</p>\r\n                    </span>\r\n                    <br />\r\n                    <span>\r\n                        <u><h3>How do I use this?</h3></u>\r\n                        <p>To use this webapp, you simply have to type in the name and/or artist of the song that you wish to look up in the search bar, and click on it in the search results!</p>\r\n                        <p><b>If you are confused about any terms that are used on this site:</b> Try mousing over the term for a tooltip explaining what it is.</p>\r\n                        <p><b>If the track you wish to search for does not show up in the search results:</b> Paste the ID given by Spotify into the search bar and press Enter. IDs are base-62 identifiers that look like this: <code>0g5J7GjfRxsunVrrcDLejQ</code>. These can be obtained by right-clicking a track in the Spotify client and either copying the Spotify URI or the Link, both of which contain the ID within them.</p>\r\n                    </span>\r\n                    <br />\r\n                    <span>\r\n                        <u><h3>How accurate is this?</h3></u>\r\n                        <p>Spotify's metadata generally does accurately tell you track information. However, because their systems to derive this information are probably based around algorithms and machine learning, there are innaccuracies.</p>\r\n                        <ul>\r\n                            <li>Personally, I've been able to find tracks where the tempo is completely innaccurate</li>\r\n                            <li>I've found tracks where the valence (happiness) score were very low for very happy songs</li>\r\n                            <li>I've seen tracks that have a different overall dataset than anything seen in the sections</li> \r\n                            <li>etc.</li>\r\n                        </ul>\r\n                        <p>Not to mention, the metadata that Spotify <i>does</i> return is not the most ideal.</p>\r\n                        <ul>\r\n                            <li>Genre is not stored under tracks nor albums, only artists, which is ridiculous because many artists are very diverse in their music, and treating all of their songs as the same set of genres is ridiculous (this is why you don't see genre on here!)</li>\r\n                            <li>Time signature is only given as <i>one</i> integer. Based off the docs, I've simply made an assumption I know to be incorrect and just put all of the numbers over 4</li>\r\n                            <li>Search results are region-locked to <i>one</i> country, which defaults to the United States unless otherwise specified</li>\r\n                            <li>An empty array is returned for the available markets if the track is not available in the same market the token is associated with</li>\r\n                            <li>Spotify is unclear as to what data is provided by the artist/distributor and what data is inferred via their automated systems</li>\r\n                        </ul>\r\n                    </span>\r\n                    <br />\r\n                    <span>\r\n                        <u><h3>How does this work?</h3></u>\r\n                        <p>The backend is my own API written in <a href=\"https://golang.org\" style={{ color: \"#85BBFD\" }}>Go</a>. It queries the <a href=\"https://developer.spotify.com/documentation/web-api/\" style={{ color: \"#85BBFD\" }}>Spotify API</a> and serves modified JSON of the results it gets. My API is available under the APGL v3.0 on my <a href=\"https://github.com/barkloaf/MetaGrabAPI\" style={{ color: \"#85BBFD\" }}>GitHub repo</a>. The frontend is written sloppily with <a href=\"https://reactjs.org/\" style={{ color: \"#85BBFD\" }}>ReactJS</a> (frontend <b>sucks.</b>), using some elements from <a href=\"https://getbootstrap.com/\" style={{ color: \"#85BBFD\" }}>Bootstrap</a> and other projects. All the source code for this site is available under the GPL v3.0 on my <a href=\"https://github.com/barkloaf/MetaGrab\" style={{ color: \"#85BBFD\" }}>GitHub repo</a>!</p>\r\n                    </span>\r\n                    <br /><br />\r\n                    <span>\r\n                        <h3>-barkloaf :3</h3>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About","import React from \"react\";\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\nimport Results from \"./Results\"\r\nimport About from \"./About\"\r\nimport Tooltipper from \"./Tooltipper\"\r\nimport {\r\n    Navbar,\r\n    Nav,\r\n    ToggleButton,\r\n    ButtonGroup\r\n} from \"react-bootstrap\"\r\n\r\nconst config = require(\"../config.json\")\r\n\r\nconst getSuggestions = async (value) => {\r\n  return fetch(new URL(\"/search?\" + encodeURIComponent(value), config.apiURL))\r\n  .then(res => res.json());\r\n};\r\n  \r\nconst renderSuggestion = (suggestion, { query }) => {\r\n  const suggestionText = `${suggestion.artists[0].name} - ${suggestion.name}`;\r\n  const matches = AutosuggestHighlightMatch(suggestionText, query);\r\n  const parts = AutosuggestHighlightParse(suggestionText, matches);\r\n\r\n  return (\r\n    <span className=\"suggestion-content\">\r\n      <img src={suggestion.album.images[0].url} width=\"100\" alt=\"Album Art\" />\r\n      <span className=\"name\">\r\n        {\r\n          parts.map((part, index) => {\r\n              const className = part.highlight ? \"highlight\" : null;\r\n\r\n              return (\r\n              <span className={className} key={index}>{part.text}</span>\r\n              );\r\n          })\r\n        }\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n\r\nconst getSuggestionValue = suggestion => suggestion.name\r\n\r\nclass Page extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {           \r\n          items: [],\r\n          result: {},\r\n          value: \"\",\r\n          suggestions: [],\r\n\r\n          error: null,\r\n          isLoaded: false,\r\n          about: true            \r\n      }\r\n\r\n      this.onKeyUp = this.onKeyUp.bind(this);\r\n  }\r\n  \r\n  jsonFetch = (id) => {\r\n    this.setState({\r\n      isLoaded: false,\r\n      about: false,\r\n      value: \"\"\r\n    });\r\n\r\n    fetch(new URL(\"/track?id=\" + encodeURIComponent(id), config.apiURL))\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          if(result.Info.name !== \"\") {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error: null,\r\n              result\r\n            });\r\n          }\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n  }\r\n  \r\n  onChange = (event, { newValue }) => {\r\n      this.setState({\r\n        value: String(newValue)\r\n      });\r\n    };\r\n  \r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    getSuggestions(value)\r\n    .then(result => this.setState({\r\n      suggestions: result.tracks.items,\r\n      sIsLoaded: true\r\n    }));\r\n  };\r\n  \r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: [],\r\n      sIsLoaded: false\r\n    });\r\n  };\r\n  \r\n  onSuggestionSelected = (event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) => {\r\n    this.jsonFetch(suggestion.id);\r\n  }\r\n\r\n  aboutButton = () => {\r\n    this.setState(prevState => ({\r\n      about: !prevState.about\r\n    }))\r\n  }\r\n\r\n  onKeyUp = (event) => {\r\n    if(event.charCode === 13 && this.state.value !== \"\") {\r\n      this.jsonFetch(this.state.value)\r\n    }\r\n  }\r\n    \r\n  render() {\r\n    let {\r\n      error, isLoaded, result, value, suggestions, about\r\n    } = this.state;\r\n  \r\n    const inputProps = {\r\n      placeholder: \"Search Spotify...\",\r\n      value,\r\n      onChange: this.onChange,\r\n      onKeyPress: this.onKeyUp\r\n    };\r\n\r\n    let header = (\r\n      <header className=\"App-header\">\r\n        <Navbar bg=\"0f0f0f\" variant=\"dark\">\r\n          <Autosuggest\r\n            suggestions={suggestions}\r\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n            getSuggestionValue={getSuggestionValue}\r\n            renderSuggestion={renderSuggestion}\r\n            inputProps={inputProps}\r\n            onSuggestionSelected={this.onSuggestionSelected}\r\n          />\r\n          <Nav className=\"mr-auto\" />\r\n          \r\n          <Tooltipper text=\"About / Help\" pos=\"bottom\">\r\n            <ButtonGroup toggle className=\"mb-2\">\r\n              <ToggleButton\r\n                  type=\"checkbox\"\r\n                  variant=\"secondary\"\r\n                  checked={about}\r\n                  value=\"1\"\r\n                  onChange={this.aboutButton}\r\n                  size=\"lg\"\r\n              >\r\n                ?\r\n              </ToggleButton>\r\n            </ButtonGroup>\r\n          </Tooltipper>\r\n        </Navbar>\r\n      </header>\r\n    )\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        {header}\r\n        <body className=\"App-body\">\r\n          {\r\n            error ?\r\n            <span className=\"about-text\">Error: {error.message}</span>\r\n            : (\r\n              about ?\r\n              <About />\r\n              : (\r\n                isLoaded ?\r\n                <Results json={result} />\r\n                : <div />\r\n              )\r\n            )\r\n          }\r\n        </body>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Page","import React, { Suspense } from \"react\";\nimport Page from \"./components/Page\"\nimport \"./App.css\";\n\nconst Loader = () => (\n  <div className=\"App\">\n    <div>Loading...</div>\n  </div>\n);\n\nconst App = () => {\n  return (\n    <Suspense fallback={<Loader />}>\n      <Page />\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}